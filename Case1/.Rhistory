nll(theta, input = x)
optimizer <- optimize(nll,c(min(x),max(x)),
theta = theta, input=x)
nll <- function(theta, input){
-sum(dnorm(input, mean = theta, sd = var(input),
log = TRUE))
}
theta <- mean(x)
nll(theta, input = x)
nll <- function(theta, input){
-sum(dnorm(input, mean = theta, sd = var(input),
log = TRUE))
}
# theta <- mean(x)
# nll(theta, input = x)
optimizer <- optimize(nll,c(min(x),max(x)), input=x)
optimizer
mean(x)
var(5)
optimizer_mean <- optimize(nll,c(min(x),max(x)), input=mean(x))
optimizer_mean
optimizer_mean <- optimize(nll,c(0, 100), input=mean(x))
optimizer_mean
theta_plotting <- seq(min(x), max(x), 100)
theta_plotting
?seq
theta_plotting <- seq(min(x), max(x), length.out = 100)
theta_plotting
plot(theta_plotting, nll(theta_plotting, x))
test <- nll(theta_plotting, x)
?apply
ll_plotting <- apply(theta_plotting, nll, input = x)
ll_plotting <- sapply(theta_plotting, nll, input = x)
plot(theta_plotting, ll_plotting, type = "l")
ll_plotting <- -sapply(theta_plotting, nll, input = x)
plot(theta_plotting, ll_plotting, type = "l")
plot(theta_plotting, ll_plotting + max(ll_plotting), type = "l")
?optim
ll_plotting <- exp(-sapply(theta_plotting, nll, input = x))
plot(theta_plotting, ll_plotting + max(ll_plotting), type = "l")
plot(theta_plotting, ll_plotting, type = "l")
x <- c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
s2 <- var(x)
L.complete.data <- function(theta) {
prod(dnorm(x, mean = theta, sd = sqrt(s2)))
}
x.ave <- mean(x)
n <- length(x)
L.ave <- function(theta) {
dnorm(x.ave, mean = theta, sd = sqrt(s2/n))
}
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, L/max(L), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, L/max(L), col = "red")
plot(th, L/max(L), col = "red", type = "l")
plot(th, L/max(L), ylab = "L", xlab = expression(theta))
plot(th, L/max(L), ylab = "L", xlab = expression(theta), type = "l")
plot(th, L/max(L), ylab = "L", xlab = expression(theta), type = "l")
lines(th, L/max(L), col = "red")
plot(th, L/max(L), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, L/max(L), col = "red")
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L/max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L/max(L)), col = "red")
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L) - log(max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L) - log(max(L)), col = "red")
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L/max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L/max(L)), col = "red")
mean(x)
L.ave <- function(theta) {
-dnorm(x.ave, mean = theta, sd = sqrt(s2/n))
}
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L/max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L/max(L)), col = "red")
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L) - log(max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L) - log(max(L)), col = "red")
L.ave <- function(theta) {
dnorm(x.ave, mean = theta, sd = sqrt(s2/n))
}
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L/max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L/max(L)), col = "red")
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L) - log(max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L) - log(max(L)), col = "red")
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, -log(L) + log(max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, -log(L) + log(max(L)), col = "red")
x <- c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
s2 <- var(x)
L.complete.data <- function(theta) {
prod(dnorm(x, mean = theta, sd = sqrt(s2)))
}
x.ave <- mean(x)
n <- length(x)
L.ave <- function(theta) {
dnorm(x.ave, mean = theta, sd = sqrt(s2/n))
}
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L/max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L/max(L)), col = "red")
x.ave
?optim
nll.complete.data <- function(theta) {
-sum(dnorm(x, mean = theta, sd = sqrt(s2), log = TRUE))
}
fit <- optim(x.ave, nll.complete.data, hessian = TRUE,
lower=70, upper=90)
fit[c("convergence", "par", "hessian")]
s2
var(x)
sd(x)
x <- c(4,6,3,7,2,4)
lambda_vector <- seq(0, 10, length.out = 100)
likelihood <- function(lambda){
prod(dpois(x, lambda = lambda))
}
likelihood_plotting <- sapply(lambda_vector, likelihood)
plot(lambda_vector, likelihood_plotting, type = "l")
par(mar=c(1,1,1,1))
plot(lambda_vector, likelihood_plotting, type = "l")
device.off()
x <- c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
s2 <- var(x)
L.complete.data <- function(theta) {
prod(dnorm(x, mean = theta, sd = sqrt(s2)))
}
x.ave <- mean(x)
n <- length(x)
L.ave <- function(theta) {
dnorm(x.ave, mean = theta, sd = sqrt(s2/n))
}
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L/max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L/max(L)), col = "red")
###### UNDERSTANDING INVERSE COVARIANCE ################
library(mvtnorm)
?dmvnorm
x <- 5
x <- 5
rm(list=ls())
print(utils::getSrcDirectory(function(){}))
print(utils::getSrcFilename(function(){}, full.names = TRUE))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# options(scipen=999)
options(scipen=0)
# dev.off()
Sys.setenv(LANG = "en")
library(glmnet)
library(MASS)
library(dplyr)
library(nlme)
library(caret)
library(ggplot2)
library(patchwork)
#####################3333
df <- read.table("preprocessed_data/df_imputed_train.csv", sep=",", header=TRUE)
df <- data.frame(df)
X = as.matrix(df[, 2:(dim(df)[2] - 1)])
y = df[, "y"]
###################### final stuff
X_small <- X[,1:117]
y_centered = y - mean(y)
cv_original <- cv.glmnet(X_small, y_centered, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = nrow(X_small),
intercept = FALSE)
cv_original
sqrt(357.5)
cv_fit <- cv.glmnet(X_small, y_centered, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 10,
intercept = FALSE)
cv_fit
plot(cv_original)
plot(cv_fit)
cv_fit <- cv.glmnet(X_small, y_centered, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 5,
intercept = FALSE)
cv_fit
plot(cv_fit)
cv_fit <- cv.glmnet(X_small, y_centered, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 20,
intercept = FALSE)
cv_fit
plot(cv_fit)
cv_original
coeficients <- as.matrix(coef(cv_original, s = "lambda.min"))
dataframe <- data.frame(coeficients)
dataframe %>% filter(s1 > 0) %>% arrange(desc(s1))
cv_original
sqrt(357.5 )
sqrt(428)
dim(df)
df[1:5, 1:10]
df[1:2, 1:95]
############## repeated cross validation - scheme
df_nestedcross <- data.frame(df)[, 2:96]
colnames(df_nestedcross)
############## repeated cross validation - scheme
df_nestedcross <- data.frame(df)[, 2:118]
colanmes(df_nestedcross)
colnames(df_nestedcross)
############## repeated cross validation - scheme
df_nestedcross <- data.frame(df)[, 2:120]
colnames(df_nestedcross)
df_nestedcross <- data.frame(df)[, 2:118]
yourdata <- df_nestedcross[sample(nrow(df_nestedcross)),]
folds_number = 10
repeated_number = 1
nlambda = 300
# inner_fold = 10
folds <- cut(seq(1,nrow(yourdata)),breaks=folds_number,labels=FALSE)
rmse_list <- array(NA, dim = c(repeated_number, folds_number, 2))
final_results <- array(NA, dim=c(repeated_number, nlambda, folds_number, 3))
for(index in 1:repeated_number){
print("repetaed number:", index)
#Perform k fold cross validation
for(fold in 1:folds_number){
print(fold)
testIndexes <- which(folds==fold,arr.ind=TRUE)
testData <- yourdata[testIndexes, ]
trainData <- yourdata[-testIndexes, ]
X_train = as.matrix(trainData[,-dim(trainData)[2]])
y_train = trainData[, "y"]
X_test = as.matrix(testData[,-dim(testData)[2]])
y_test = testData[, "y"]
# inner loop
cv_fit <- cv.glmnet(X_train, y_train, nlambda = nlambda, alpha = 1,
type.measure = "mse", nfolds = nrow(X_train),
grouped = F)
final_results[index, ,fold, 1] = cv_fit$cvm
final_results[index, ,fold, 2] = cv_fit$cvsd
final_results[index, ,fold, 3] = cv_fit$lambda
predictions = predict(cv_fit, newx = X_test, s = "lambda.min")
rmse_list[index, fold, 1] = sqrt(mean((predictions - y_test)^2))
rmse_list[index, fold, 2] = cv_fit$lambda.min
}
}
############## repeated cross validation - scheme
df_nestedcross <- data.frame(df[, 2:118], df[, "y"])
colnames(df_nestedcross)
############## repeated cross validation - scheme
df_nestedcross <- data.frame(df[, 2:118], y= df[, "y"])
colnames(df_nestedcross)
df_nestedcross <- data.frame(df[, 2:118], y= df[, "y"])
yourdata <- df_nestedcross[sample(nrow(df_nestedcross)),]
folds_number = 10
repeated_number = 1
nlambda = 300
# inner_fold = 10
folds <- cut(seq(1,nrow(yourdata)),breaks=folds_number,labels=FALSE)
rmse_list <- array(NA, dim = c(repeated_number, folds_number, 2))
final_results <- array(NA, dim=c(repeated_number, nlambda, folds_number, 3))
for(index in 1:repeated_number){
print("repetaed number:", index)
#Perform k fold cross validation
for(fold in 1:folds_number){
print(fold)
testIndexes <- which(folds==fold,arr.ind=TRUE)
testData <- yourdata[testIndexes, ]
trainData <- yourdata[-testIndexes, ]
X_train = as.matrix(trainData[,-dim(trainData)[2]])
y_train = trainData[, "y"]
X_test = as.matrix(testData[,-dim(testData)[2]])
y_test = testData[, "y"]
# inner loop
cv_fit <- cv.glmnet(X_train, y_train, nlambda = nlambda, alpha = 1,
type.measure = "mse", nfolds = nrow(X_train),
grouped = F)
final_results[index, ,fold, 1] = cv_fit$cvm
final_results[index, ,fold, 2] = cv_fit$cvsd
final_results[index, ,fold, 3] = cv_fit$lambda
predictions = predict(cv_fit, newx = X_test, s = "lambda.min")
rmse_list[index, fold, 1] = sqrt(mean((predictions - y_test)^2))
rmse_list[index, fold, 2] = cv_fit$lambda.min
}
}
dim(rmse_list)
rmse_list[1, , ]
mean(rmse_list[1, , 1])
sd(rmse_list[1, , 1])
rmse_list
round(rmse_list[1, , ], 4)
round(t(rmse_list[1, , ]), 4)
round(t(rmse_list[1, , ]), 3)
df_nestedcross <- data.frame(df[, 2:118], y= df[, "y"])
yourdata <- df_nestedcross[sample(nrow(df_nestedcross)),]
folds_number = 20
repeated_number = 1
nlambda = 300
# inner_fold = 10
folds <- cut(seq(1,nrow(yourdata)),breaks=folds_number,labels=FALSE)
rmse_list <- array(NA, dim = c(repeated_number, folds_number, 3))
final_results <- array(NA, dim=c(repeated_number, nlambda, folds_number, 3))
for(index in 1:repeated_number){
print("repetaed number:", index)
#Perform k fold cross validation
for(fold in 1:folds_number){
print(fold)
testIndexes <- which(folds==fold,arr.ind=TRUE)
testData <- yourdata[testIndexes, ]
trainData <- yourdata[-testIndexes, ]
X_train = as.matrix(trainData[,-dim(trainData)[2]])
y_train = trainData[, "y"]
X_test = as.matrix(testData[,-dim(testData)[2]])
y_test = testData[, "y"]
# inner loop
cv_fit <- cv.glmnet(X_train, y_train, nlambda = nlambda, alpha = 1,
type.measure = "mse", nfolds = nrow(X_train),
grouped = F)
final_results[index, ,fold, 1] = cv_fit$cvm
final_results[index, ,fold, 2] = cv_fit$cvsd
final_results[index, ,fold, 3] = cv_fit$lambda
predictions = predict(cv_fit, newx = X_test, s = "lambda.min")
rmse_list[index, fold, 1] = sqrt(mean((predictions - y_test)^2))
rmse_list[index, fold, 2] = cv_fit$lambda.min
}
}
round(rmse_list[1, , ], 4)
> mean(rmse_list[1, , 1])
mean(rmse_list[1, , 1])
sd(rmse_list[1, , 1])
dim(X)
dim(X_small)
cv_fit <- cv.glmnet(X_small, y_centered, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 10,
intercept = FALSE)
cv_fit
plot(cv_fit)
rmse_list[1, ,2]
mean(rmse_list[1, ,2])
sd(rmse_list[1, ,2])
sqrt(398.0)
coeficients <- as.matrix(coef(cv_fit, s = "lambda.min"))
dataframe <- data.frame(coeficients)
dataframe %>% filter(s1 > 0) %>% arrange(desc(s1))
fit <- glmnet(X, y, lambda = cv_fit$lambda.min)
fit <- glmnet(X_small, y_centered, lambda = cv_fit$lambda.min)
fit
plot(fit)
coef(fit)
plot(cv_fit)
fit_plotting <- glmnet(X_small, y_centered)
plot(fit_plotting)
cv_fit
plot(fit_plotting, label = TRUE)
cv_fit_intercept <- cv.glmnet(X_small, y, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 10,
intercept = TRUE)
cv_fit_intercept
dim(X_small)
apply(X_small, 1, mean)
apply(X_small, 2, mean)
?glmnet
cv_fit_intercept <- cv.glmnet(X_small, y, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 10)
cv_fit_intercept
cv_fit_intercept <- cv.glmnet(X_small, y, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 10)
cv_fit_intercept
cv_fit_intercept <- cv.glmnet(X_small, y, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 10)
cv_fit_intercept
cv_fit_intercept$lambda.min
repeated_cv_final = 300
lambdas_final = array(NA, dim = c(repeated_cv_final, 2))
for (i in 1:repeated_cv_final){
print(i)
cv_fit_intercept <- cv.glmnet(X_small, y, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 10)
lambdas_final[i, 1] = cv_fit_intercept$lambda.min
lambdas_final[i, 2] = cv_fit_intercept$lambda.1se
}
repeated_cv_final = 100
lambdas_final = array(NA, dim = c(repeated_cv_final, 2))
for (i in 1:repeated_cv_final){
print(i)
cv_fit_intercept <- cv.glmnet(X_small, y, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 10)
lambdas_final[i, 1] = cv_fit_intercept$lambda.min
lambdas_final[i, 2] = cv_fit_intercept$lambda.1se
}
repeated_cv_final = 200
lambdas_final = array(NA, dim = c(repeated_cv_final, 2))
for (i in 1:repeated_cv_final){
print(i)
cv_fit_intercept <- cv.glmnet(X_small, y, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 10)
lambdas_final[i, 1] = cv_fit_intercept$lambda.min
lambdas_final[i, 2] = cv_fit_intercept$lambda.1se
}
dim(lambdas_final)
hist(lambdas_final[, 1])
hist(lambdas_final[, 1])
hist(lambdas_final[, 2])
mean(lambdas_final[, 1])
sd(lambdas_final[, 1])
df_test <- read.table("preprocessed_data/df_imputed_test.csv", sep=",", header=TRUE)
dim(df_test)
colnames(df_test)
df_test <- data.frame(df_test[, 2:dim(df_test)[2]])
dim(df_test)
colnames(df_test)
apply(df_test, 2, mean)
df_test[1:5, 1:5]
df_test <- read.table("preprocessed_data/df_imputed_test.csv", sep=",", header=TRUE)
df_test <- data.frame(df_test[, 3:dim(df_test)[2]])
mean(lambdas_final[, 1])
fit <- glmnet(X_small, y_centered, lambda = mean(lambdas_final[, 1]))
fit
plot(fit)
plot(fit)
coef(fit)
coeficients <- as.matrix(coef(fit)
dataframe <- data.frame(coeficients)
coeficients <- as.matrix(coef(fit))
dataframe <- data.frame(coeficients)
dataframe %>% filter(s1 > 0) %>% arrange(desc(s1))
coeficients <- as.matrix(coef(fit))
dataframe <- data.frame(coeficients)
dataframe %>% filter(s0 > 0) %>% arrange(desc(s0))
fit
fit <- glmnet(X_small, y, lambda = mean(lambdas_final[, 1]))
fit
coeficients <- as.matrix(coef(fit))
dataframe <- data.frame(coeficients)
dataframe %>% filter(s0 > 0) %>% arrange(desc(s0))
mean(y)
options(scipen=999)
coeficients <- as.matrix(coef(fit))
dataframe <- data.frame(coeficients)
dataframe %>% filter(s0 > 0) %>% arrange(desc(s0))
dataframe %>% filter(s0 > 0) %>% arrange(desc(s0)) %>% round(., 4)
fit <- glmnet(X_small, y, lambda = mean(lambdas_final[, 1]))
fit
coeficients <- as.matrix(coef(fit))
dataframe <- data.frame(coeficients)
dataframe %>% filter(s0 > 0) %>% arrange(desc(s0)) %>% round(., 4)
predictions <- predict(fit, df_test)
df_test <- as.matrix(data.frame(df_test[, 3:dim(df_test)[2]]))
df_test <- read.table("preprocessed_data/df_imputed_test.csv", sep=",", header=TRUE)
df_test <- as.matrix(data.frame(df_test[, 3:dim(df_test)[2]]))
predictions <- predict(fit, df_test)
length(predictions)
predictions[1:10]
range(y)
range(predictions)
mean(y)
write(predictions, "myFile.txt")
?write
write(predictions, "myFile.txt", ncolumns = 1)
df <- read.table("preprocessed_data/df_imputed_train.csv", sep=",", header=TRUE)
df <- data.frame(df)
X = as.matrix(df[, 2:(dim(df)[2] - 1)])
y = df[, "y"]
dim(df)
colnames(df)
dim(X)
colnames(X)
df <- read.table("preprocessed_data/df_imputed_train.csv", sep=",", header=TRUE)
df <- data.frame(df)
X = as.matrix(df[, 3:(dim(df)[2] - 1)])
y = df[, "y"]
repeated_cv_final = 10
lambdas_final = array(NA, dim = c(repeated_cv_final, 2))
for (i in 1:repeated_cv_final){
print(i)
cv_fit_intercept <- cv.glmnet(X, y, nlambda = 300, alpha = 1,
type.measure = "mse", nfolds = 10)
lambdas_final[i, 1] = cv_fit_intercept$lambda.min
lambdas_final[i, 2] = cv_fit_intercept$lambda.1se
}
cv_fit_intercept
lambdas_final
mean(lambdas_final[, 1])
sd(lambdas_final[, 1])
sqrt(412.2 )
residuals(fit)
residuals <- y - predict(fit, X_small)
plot(residuals)
mean(y)
acf(residuals)
hist(lambdas_final[, 1])
hist(lambdas_final[, 1], breaks = 20)
dim(lambdas_final)
dataframe %>% filter(s1 > 0) %>% arrange(desc(s1))
